from aiogram import Bot, types, Dispatcher, executor
import sqlite3
import asyncio
#—Å–ª–∏—Ç–æ –≤ @smoke_software
API_TOKEN = "5169282150:AAGf_Tioj59IsekGSg07ktT_aynKoaIioqM"
bot = Bot(token=API_TOKEN, parse_mode="html")
dp = Dispatcher(bot)

admin = [827638161]
with sqlite3.connect('data.db', check_same_thread=False) as connection:
    q = connection.cursor()


async def sep(num, sep):
    number = [str(num)[::-1][i:i + 3][::-1] for i in range(0, len(str(num)), 3)]
    m = f'{sep}'.join(number[::-1])
    return m


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    try:
        q.execute("""CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER,
    win INTEGER,
    eng INTEGER,
    kng INTEGER
    )""")
        q.execute(f"SELECT * FROM users WHERE user_id = {message.from_user.id}")
        result = q.fetchall()
        if len(result) == 0:
            q.execute(f"INSERT INTO users (user_id, win, lvl, eng, kng)"
                      f"VALUES ('{message.from_user.id}', '1000','1', '100', '5')")
            connection.commit()
            await message.answer('–ó–¥–∞—Ä–æ–≤–∞ —è –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç\n/help - –ö–∞—Ç–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥')
        else:
            await message.answer('–ó–¥–∞—Ä–æ–≤–∞, –∏–≥—Ä–æ–º–∞–Ω, —è –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç\n–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥ - /help')
    except Exception as error:
        await message.answer(f'–û—à–∏–±–∫–∞:\n{error}')


@dp.message_handler(commands=['bonus'])
async def me(message: types.Message):
    try:
        z = q.execute(f'SELECT win FROM users WHERE user_id = {message.from_user.id}').fetchone()
        connection.commit()
        wins = z[0]
        if wins > int(1):
            await message.answer(f'–ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å = 1 –º–æ–Ω–µ—Ç–µ, –≤–∞—à –±–∞–ª–∞–Ω—Å {wins}')

        else:
            q.execute('UPDATE users SET win = win + {} WHERE user_id = {}'.format(10000, message.from_user.id))
            await message.answer('–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 10000 –º–æ–Ω–µ—Ç')
    except:
        await message.answer('–í–∞—Å –Ω–µ—Ç—É –≤ –±–∞–∑–µ\n–¢—ã–∫ --> /start')


@dp.message_handler(commands=['me'])
async def me(message: types.Message):
    try:
        z = q.execute(f'SELECT win FROM users WHERE user_id = {message.from_user.id}').fetchone()
        x = q.execute(f'SELECT lvl FROM users WHERE user_id = {message.from_user.id}').fetchone()

        connection.commit()
        wins = z[0]
        lvls = x[0]
        await message.answer(
            f'–í–æ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\nüÜî: {message.from_user.id}\n\nüóì –ò–º—è: {message.from_user.first_name}\n\nüí∞ –ú–æ–Ω–µ—Ç: {sep(round(wins), ".")}\n\nüî∞ –£—Ä–æ–≤–µ–Ω—å: {lvls}\n')

    except Exception as error:
        await message.answer(f'–û—à–∏–±–∫–∞:\n{error}')


@dp.message_handler(commands=['help'])
async def me(message: types.Message):
    await message.answer(
        '/top - –¢–æ–ø 10 –±–æ–≥–∞—Ç—ã—Ö –ª—é–¥–µ–π –≤ –±–æ—Ç–µ\n/me - –í–∞—à –∞–∫–∫–∞—É–Ω—Ç\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n<b>/bonus - ¬´ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å ¬ª,</b> –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 1 –º–æ–Ω–µ—Ç\n<b>–ü–µ—Ä–µ–¥–∞—Ç—å</b>, ¬´ —Å—É–º–º–∞ ¬ª - –ø–µ—Ä–µ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n<b>–ü–µ—Ä–µ–¥–∞—Ç—å</b>, ¬´ —é–∑–µ—Ä –∏–¥ ¬ª, ¬´ –°—É–º–º–∞ ¬ª\n<b>–§—É—Ç–±–æ–ª - ¬´ —Å—É–º–º–∞ ¬ª</b>\n<b>–ë–æ—É–ª–∏–Ω–≥</b> - ¬´ —Å—É–º–º–∞\n<b>–ë–∞—Å–∫–µ—Ç–±–æ–ª</b> ¬´ –°—É–º–º–∞ ¬ª\n<b>–ë–∞–ª–∞–Ω—Å</b>, –í–∞—à –±–∞–ª–∞–Ω—Å\n<b>–ú–∞–≥–∞–∑–∏–Ω</b> - –ø—Ä–æ–∫–∞—á–∫–∞, —Ç–æ–≤–∞—Ä—ã –≤ –±–æ—Ç–µ\n\n–ö–æ–º–∞–Ω–¥—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è:\n<b>–î–∞—Ä—Ç—Å</b> ¬´ –°—É–º–º–∞ ¬ª\n<b>–ö–∞–∑–∏–Ω–æ</b> ¬´ –°—É–º–º–∞ ¬ª \n<b>–ë–∞–Ω–¥–∏—Ç</b> - ¬´ —Å—É–º–º–∞ ¬ª')


@dp.message_handler(commands=['balance'])
async def dick(message: types.Message):
    try:
        z = q.execute(f'SELECT win FROM users WHERE user_id = {message.from_user.id}').fetchone()
        connection.commit()
        wins = z[0]
        await message.answer(f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å {sep(round(wins), ".")}')
    except Exception as error:
        await message.answer(f'–û—à–∏–±–∫–∞:\n{error}')


@dp.message_handler(commands=['top'])
async def dighjkck(message: types.Message):
    try:
        q.execute("SELECT user_id, win FROM users order by win desc")
        res = q.fetchall()
        em = {0: '0', 1: "1", 2: "2", 3: "3", 4: "4", 5: "5", 6: "6", 7: "7", 8: "8", 9: "9", 10: "10"}
        message_lines = []
        for index, item in enumerate(res, 1):
            message_lines.append(f"{em.get(index)}. [{'–ò–≥—Ä–æ–∫'}](tg://openmessage?user_id={item[0]}): {item[1]} üí∞")
        am = message_lines[:10]
        mes = '\n'.join(am)
        await message.answer(f'–°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤ –≤—Å–µ–≥–æ –º–∏—Ä–∞:\n\n{mes}', parse_mode='Markdown')
    except:
        await message.answer('–æ—à–∏–±–∫–∞')


@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    if message.text.lower().startswith("–±–æ—É–ª–∏–Ω–≥"):
        try:
            z = q.execute(f'SELECT win FROM users WHERE user_id = {message.from_user.id}').fetchone()
            connection.commit()
            wins = z[0]
            s = message.text.replace('.', '')
            word = s.replace('–±–æ—É–ª–∏–Ω–≥', '').split(" ", 1)
            if wins < int(word[1]):
                await message.answer('–ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π')
            else:
                dice_mes = await bot.send_dice(message.chat.id, 'üé≥')
                value = dice_mes.dice.value
                if value == 1:
                    await asyncio.sleep(4)
                    djeks = f'{int(word[1])}'
                    await message.answer(f"–ú–∏–º–æ! <b>-{sep(djeks, '.')}</b> –ú–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n")
                    q.execute('UPDATE users SET win = win - {} WHERE user_id = {}'.format(djeks, message.from_user.id))
                    connection.commit()
                if value == 2:
                    await asyncio.sleep(4)
                    djeks = f'{int(word[1])}'
                    await message.answer(f"–£–≤—ã —Ç—ã —Å–±–∏–ª 1, <b>-{sep(djeks, '.')}</b> –ú–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n")
                    q.execute('UPDATE users SET win = win - {} WHERE user_id = {}'.format(djeks, message.from_user.id))
                    connection.commit()
                if value == 3:
                    await asyncio.sleep(4)
                    djeksx = f'{int(word[1]) * 1}'
                    await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Å–±–∏–ª —Ü–µ–ª—ã—Ö 3 –∫–µ–≥–ª–∏, <b>+{sep(djeksx, '.')}</b> –ú–æ–Ω–µ—Ç\n")
                    q.execute('UPDATE users SET win = win + {} WHERE user_id = {}'.format(djeksx, message.from_user.id))
                    connection.commit()

                if value == 4:
                    await asyncio.sleep(4)
                    djeksx = f'{int(word[1]) * 2}'
                    await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Å–±–∏–ª —Ü–µ–ª—ã—Ö 4 –∫–µ–≥–ª–∏, <b>+{sep(djeksx, '.')}</b> –ú–æ–Ω–µ—Ç\n")
                    q.execute('UPDATE users SET win = win + {} WHERE user_id = {}'.format(djeksx, message.from_user.id))
                    connection.commit()
                if value == 5:
                    await asyncio.sleep(4)
                    djeksx = f'{int(word[1]) * 3}'
                    await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Å–±–∏–ª —Ü–µ–ª—ã—Ö 5 –∫–µ–≥–ª–∏, <b>+{sep(djeksx, '.')}</b> –ú–æ–Ω–µ—Ç\n")
                    q.execute('UPDATE users SET win = win + {} WHERE user_id = {}'.format(djeksx, message.from_user.id))
                    connection.commit()
                if value == 6:
                    await asyncio.sleep(4)

                    djeksx = f'{int(word[1]) * 4}'
                    await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Å–±–∏–ª –≤—Å–µ –∫–µ–≥–ª–∏, <b>+{sep(djeksx, '.')}</b> –ú–æ–Ω–µ—Ç\n")
                    q.execute('UPDATE users SET win = win + {} WHERE user_id = {}'.format(djeksx, message.from_user.id))
                    connection.commit()
        except Exception as error:
            await message.answer(f'–û—à–∏–±–∫–∞:\n{error}')

    if message.text.lower().startswith("—Ñ—É—Ç–±–æ–ª"):
        try:
            z = q.execute(f'SELECT win FROM users WHERE user_id = {message.from_user.id}').fetchone()
            connection.commit()
            wins = z[0]
            s = message.text.replace('.', '')
            word = s.replace('/—Ñ—É—Ç–±–æ–ª -', ' ').split(" ", 1)
            if wins < int(word[1]):
                await message.answer('–ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π')
            else:
                dice_mes = await bot.send_dice(message.chat.id, '‚öΩÔ∏è')
                value = dice_mes.dice.value
                if value in [1, 2]:
                    await asyncio.sleep(4)
                    djeks = f'{int(word[1])}'
                    await message.answer(f"–ú–∏–º–æ! <b>-{sep(djeks, '.')}</b> –ú–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n")
                    q.execute('UPDATE users SET win = win - {} WHERE user_id = {}'.format(djeks, message.from_user.id))
                    connection.commit()

                if value in [3, 4, 5]:
                    await asyncio.sleep(4)
                    djeks = f'{int(word[1]) * 3}'
                    await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –∑–∞–±–∏–ª –≥–æ–ª! <b>+{sep(djeks, '.')} </b> –º–æ–Ω–µ—Ç\n")
                    q.execute('UPDATE users SET win = win + {} WHERE user_id = {}'.format(djeks, message.from_user.id))
                    connection.commit()

        except Exception as error:
            await message.answer(f'–û—à–∏–±–∫–∞:\n{error}')

    if message.text.lower().startswith('–ø–µ—Ä–µ–¥–∞—Ç—å'):
        if message.from_user.id in admin:
            try:
                if message.reply_to_message:
                    s = message.text.replace('.', '').replace('.', '')
                    word = s.replace('–ø–µ—Ä–µ–¥–∞—Ç—å -', '').split(" ", 1)

                    q.execute('UPDATE users SET win = win + {} WHERE user_id = {}'.format(word[1],
                                                                                          message.reply_to_message.from_user.id))
                    connection.commit()
                    await message.answer(
                        f'<a href="tg://openmessage?user_id={message.from_user.id}">{message.from_user.first_name}</a> –ü–µ—Ä–µ–¥–∞–ª {sep(word[1], ".")}  –º–æ–Ω–µ—Ç –¥–ª—è <a href="tg://openmessage?user_id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>')
                if not message.reply_to_message:
                    sx = message.text.replace('.', '')
                    wordx = sx.replace('–ø–µ—Ä–µ–¥–∞—Ç—å', '').split(" ", 2)
                    wordsx = sx.replace('–ø–µ—Ä–µ–¥–∞—Ç—å', '').split(" ", 3)
                    s = q.execute(f'SELECT win FROM users WHERE user_id = {message.from_user.id}').fetchone()
                    connection.commit()
                    wins = s[0]
                    q.execute('UPDATE users SET win = win + {} WHERE user_id = {}'.format(wordsx[2], wordx[1]))
                    connection.commit()
                    await message.answer(
                        f'<a href="tg://openmessage?user_id={message.from_user.id}">{message.from_user.first_name}</a> –ü–µ—Ä–µ–¥–∞–ª {sep(wordsx[2], ".")}  –º–æ–Ω–µ—Ç –¥–ª—è <a href="tg://openmessage?user_id={wordx[1]}">–ò–≥—Ä–æ–∫–∞</a>')
                    await bot.send_message(wordx[1],
                                           f'<a href="tg://openmessage?user_id={message.from_user.id}">{message.from_user.first_name}</a>, –ø–µ—Ä–µ–¥–∞–ª –≤–∞–º {wordsx[2]} –º–æ–Ω–µ—Ç\n\n',
                                           parse_mode='HTML')
                    print(wordx[1], wordsx[2])

            except:
                pass
        else:
            try:
                if message.reply_to_message:
                    if message.reply_to_message.from_user.id == message.from_user.id and message.reply_to_message.from_user.id == 2035285317:
                        await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –º–æ–Ω–µ—Ç—ã —Å–µ–±–µ –∏–ª–∏ –∂–µ –±–æ—Ç—É')
                    else:
                        s = message.text.replace('.', '')

                        word = s.replace('–ø–µ—Ä–µ–¥–∞—Ç—å -', '').split(" ", 1)
                        s = q.execute(f'SELECT win FROM users WHERE user_id = {message.from_user.id}').fetchone()
                        connection.commit()
                        wins = s[0]
                        if wins < int(word[1]):
                            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç')
                        else:
                            q.execute('UPDATE users SET win = win - {} WHERE user_id = {}'.format(word[1],
                                                                                                  message.from_user.id))
                            connection.commit()
                            q.execute('UPDATE users SET win = win + {} WHERE user_id = {}'.format(word[1],
                                                                                                  message.reply_to_message.from_user.id))
                            connection.commit()
                            await message.answer(
                                f'<a href="tg://openmessage?user_id={message.from_user.id}">{message.from_user.first_name}</a> –ü–µ—Ä–µ–¥–∞–ª {sep(word[1], ".")}  –º–æ–Ω–µ—Ç –¥–ª—è <a href="tg://openmessage?user_id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>')
                if not message.reply_to_message:
                    sx = message.text.replace('.', '')
                    wordx = sx.replace('–ø–µ—Ä–µ–¥–∞—Ç—å', '').split(" ", 2)
                    wordsx = sx.replace('–ø–µ—Ä–µ–¥–∞—Ç—å', '').split(" ", 3)
                    s = q.execute(f'SELECT win FROM users WHERE user_id = {message.from_user.id}').fetchone()
                    connection.commit()
                    wins = s[0]
                    if wins < int(wordsx[2]):
                        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç')
                    else:
                        try:
                            if int(wordx[1]) == message.from_user.id:
                                await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–µ–±–µ –º–æ–Ω–µ—Ç—ã")
                            else:
                                q.execute('UPDATE users SET win = win - {} WHERE user_id = {}'.format(wordsx[2],
                                                                                                      message.from_user.id))
                                connection.commit()
                                q.execute(
                                    'UPDATE users SET win = win + {} WHERE user_id = {}'.format(wordsx[2], wordx[1]))
                                connection.commit()
                                await message.answer(
                                    f'<a href="tg://openmessage?user_id={message.from_user.id}">{message.from_user.first_name}</a> –ü–µ—Ä–µ–¥–∞–ª {sep(wordsx[2], ".")}  –º–æ–Ω–µ—Ç –¥–ª—è <a href="tg://openmessage?user_id={wordx[1]}">–ò–≥—Ä–æ–∫–∞</a>')
                                await bot.send_message(wordx[1],
                                                       f'<a href="tg://openmessage?user_id={message.from_user.id}">{message.from_user.first_name}</a>, –ø–µ—Ä–µ–¥–∞–ª –≤–∞–º {wordsx[2]} –º–æ–Ω–µ—Ç',
                                                       parse_mode='HTML')
                                print(wordx[1])
                        except:
                            await message.answer(" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as error:
                await message.answer(f'–û—à–∏–±–∫–∞:\n{error}')

    if message.text.lower().startswith('–±–∞—Å–∫–µ—Ç–±–æ–ª'):
        try:
            z = q.execute(f'SELECT win FROM users WHERE user_id = {message.from_user.id}').fetchone()
            connection.commit()
            wins = z[0]
            s = message.text.replace('.', '')
            word = s.replace('–±–∞—Å–∫–µ—Ç–±–æ–ª', '').split(' ', 1)
            if wins < int(word[1]):
                await message.answer('–ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π')
            else:
                dice_mes = await bot.send_dice(message.chat.id, 'üèÄ')
                value = dice_mes.dice.value
                if value in [1, 2, 3]:
                    await asyncio.sleep(4)
                    djeks = f'{int(word[1])}'
                    await message.answer(f"–ú–∏–º–æ! <b>-{sep(djeks, '.')}</b> –ú–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n")
                    q.execute('UPDATE users SET win = win - {} WHERE user_id = {}'.format(djeks, message.from_user.id))
                    connection.commit()

                if value in [4, 5]:
                    await asyncio.sleep(4)
                    djeks = f'{int(word[1]) * 3}'
                    await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–ø–∞–ª –ø—Ä—è–º –≤ —Å–µ—Ç–∫—É! <b>+{sep(djeks, '.')} </b> –º–æ–Ω–µ—Ç\n")
                    q.execute('UPDATE users SET win = win + {} WHERE user_id = {}'.format(djeks, message.from_user.id))
                    connection.commit()

        except Exception as error:
            await message.answer(f'–û—à–∏–±–∫–∞:\n{error}')

    if message.text.lower() == '–±–∞–ª–∞–Ω—Å':
        try:
            z = q.execute(f'SELECT win FROM users WHERE user_id = {message.from_user.id}').fetchone()
            connection.commit()
            wins = z[0]
            await message.answer(f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å {sep(round(wins), ".")}')
        except Exception as error:
            await message.answer(f'–û—à–∏–±–∫–∞:\n{error}')

    if message.text.lower().startswith('–∫–∞–∑–∏–Ω–æ'):
        try:
            z = q.execute(f'SELECT win FROM users WHERE user_id = {message.from_user.id}').fetchone()
            connection.commit()
            wins = z[0]
            s = message.text.replace('.', '')
            word = s.replace('–∫–∞–∑–∏–Ω–æ', '').split(" ", 1)
            if wins < int(word[1]):
                    await message.answer('–ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π')
            else:

                    dice_mes = await bot.send_dice(message.chat.id, 'üé∞')
                    value = dice_mes.dice.value
                    if value in [54, 26, 24, 62, 44, 2, 60, 61, 9, 59, 52, 49, 39, 63, 32, 23, 56, 4, 35, 27, 17, 21, 2,
                                 16, 13, 5, 47, 5, 33, 30, 41, 38, 3, 48, 42]:
                        await asyncio.sleep(2.3)
                        djeks = f'{int(word[1]) * 2}'
                        await message.answer(f"–ü–∞—Ä–∞! <b>+{sep(djeks, '.')}</b> –ú–æ–Ω–µ—Ç.\n", parse_mode='HTML')
                        q.execute(
                            'UPDATE users SET win = win + {} WHERE user_id = {}'.format(djeks, message.from_user.id))
                        connection.commit()

                    if value in [22, 1, 43]:
                        await asyncio.sleep(2.3)
                        djeks = f'{int(word[1]) * 6}'
                        await message.answer(f"–î–ñ–ï–ö–ü–û–¢!!! <b>+{sep(djeks, '.')}</b> –º–æ–Ω–µ—Ç.\n", parse_mode='HTML')
                        q.execute(
                            'UPDATE users SET win = win + {} WHERE user_id = {}'.format(djeks, message.from_user.id))
                        connection.commit()

                    if value in [64]:
                        await asyncio.sleep(2.3)
                        djeks = f'{int(word[1]) * 10}'
                        await message.answer(f"–ú–ï–ì–ê –î–ñ–ï–ö–ü–û–¢!!! <b>+{sep(djeks, '.')}</b> –º–æ–Ω–µ—Ç.\n",
                                             parse_mode='HTML')
                        q.execute(
                            'UPDATE users SET win = win + {} WHERE user_id = {}'.format(djeks, message.from_user.id))
                        connection.commit()

                    if value not in [22, 64, 1, 43, 54, 26, 24, 62, 44, 2, 60, 61, 9, 59, 52, 49, 39, 63, 32, 23, 56, 4,
                                     35, 27, 17, 21, 2, 16, 13, 5, 47, 5, 33, 30, 41, 38, 3, 48, 42]:
                        await asyncio.sleep(2.3)
                        djeks = f'{int(word[1])}'
                        await message.answer(
                            f"–ù–∏—á–µ–≥–æ –Ω–µ —Å–æ–ø–∞–ª–æ, <b>-{sep(djeks, '.')} </b> –º–æ–Ω–µ—Ç\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n",
                            parse_mode='HTML')
                        q.execute(
                            'UPDATE users SET win = win - {} WHERE user_id = {}'.format(djeks, message.from_user.id))
                        connection.commit()

        except Exception as error:
            await message.answer(f'–û—à–∏–±–∫–∞:\n{error}')


executor.start_polling(dp, skip_updates=True)
#—Å–ª–∏—Ç–æ –≤ @smoke_software